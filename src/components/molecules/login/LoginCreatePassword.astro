<!-- <createPassword>> --><!-- Modal para "Crear una contraseña" -->
<div id="div-create-password" class="text-center">
    <h2 class="text-lg mb-1">
        Crea una contraseña <span class="font-semibold" id="spanEmail"></span>
    </h2>
    <p class="text-base mb-4 mt-4" style="color: var(--color-text-muted);">
        Debe tener al menos 6 caracteres
    </p>
</div>

<!-- Formulario para ingresar y confirmar contraseña -->
<form class="space-y-6" id="createPasswordForm">
    <input
        id="passwordInput"
        type="password"
        placeholder="Contraseña"
        onblur="this.value = this.value.trim()"
        required
        class="w-full h-12 px-4 border focus:outline-none focus:ring-2 rounded-full text-center placeholder:text-center"
        style="background-color: var(--color-bg); border-color: var(--color-border); color: var(--color-text); --tw-ring-color: var(--color-success);"
    />
    <input
        id="confirmPasswordInput"
        type="password"
        placeholder="Confirmar contraseña"
        onblur="this.value = this.value.trim()"
        required
        class="w-full h-12 px-4 border focus:outline-none focus:ring-2 rounded-full text-center placeholder:text-center"
        style="background-color: var(--color-bg); border-color: var(--color-border); color: var(--color-text); --tw-ring-color: var(--color-success);"
    />

    <button
        id="btnCheckPassword"
        disabled
        type="submit"
        class="w-full h-12 text-white font-medium text-base rounded-full opacity-50 cursor-not-allowed focus:ring-4"
        style="background: var(--gradient-button-primary);"
    >
        Continuar
    </button>
</form>

<!-- Mensaje de error -->
<p class="mt-2 text-transparent text-center">
    *<span
        id="errorMessagePassword"
        class="mt-2 hidden text-center"
        style="color: var(--color-danger);"></span>
</p>

<!-- Aviso de términos y políticas -->
<p class="text-sm text-center mt-0.5" style="color: var(--color-text-muted);">
    Al crear una cuenta en IqEngi, aceptas los
    <a href="#" class="underline" style="color: var(--color-primary);"
        >Términos de Servicio</a
    >
    y
    <a href="#" class="text-purple-dark-400 underline"
        >Políticas de Privacidad</a
    >.
</p>

<script>
    import { showElement, hideElement } from '@services/closeOpenLogin';

    // Referencias a los elementos
    const createPasswordForm = document.getElementById(
        'createPasswordForm',
    ) as HTMLFormElement;
    const passwordInput = document.getElementById(
        'passwordInput',
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
        'confirmPasswordInput',
    ) as HTMLInputElement;
    const errorMessage = document.getElementById(
        'errorMessagePassword',
    ) as HTMLParagraphElement;
    const btnCheckPassword = document.getElementById(
        'btnCheckPassword',
    ) as HTMLButtonElement;

    /**
     * Función que valida que:
     *  - Ambos campos estén llenos.
     *  - La contraseña tenga al menos 6 caracteres.
     *  - Las contraseñas coincidan.
     * Dependiendo de la validación, se habilita o deshabilita el botón
     * y se muestra el mensaje de error correspondiente.
     */
    function checkPasswords() {
        const password = passwordInput.value.trim();
        const confirmPassword = confirmPasswordInput.value.trim();

        let isValid = true;
        let errorText = '';

        // Verificar que ambos campos estén llenos.
        if (password === '' || confirmPassword === '') {
            isValid = false;
        }

        // Verificar que la contraseña tenga al menos 6 caracteres.
        if (password && password.length < 6) {
            isValid = false;
            errorText = 'La contraseña debe tener al menos 6 caracteres.';
        }

        // Verificar que las contraseñas coincidan.
        if (password && confirmPassword && password !== confirmPassword) {
            isValid = false;
            errorText = 'Las contraseñas no coinciden.';
        }

        // Actualiza la visualización del mensaje de error.
        if (!isValid && errorText !== '') {
            errorMessage.textContent = errorText;
            errorMessage.classList.remove('hidden');
        } else {
            errorMessage.textContent = '';
            errorMessage.classList.add('hidden');
        }

        // Actualiza el estado y los estilos del botón.
        btnCheckPassword.disabled = !isValid;
        btnCheckPassword.classList.toggle('opacity-50', !isValid);
        btnCheckPassword.classList.toggle('cursor-not-allowed', !isValid);
        btnCheckPassword.classList.toggle('cursor-pointer', isValid);
        btnCheckPassword.classList.toggle('hover:scale-105', isValid);
        btnCheckPassword.classList.toggle('transition-transform', isValid);
    }

    // Agregar los escuchadores a los inputs para validar en tiempo real.
    passwordInput.addEventListener('input', checkPasswords);
    confirmPasswordInput.addEventListener('input', checkPasswords);

    // Manejador para el evento submit del formulario.
    createPasswordForm.addEventListener('submit', (event) => {
        event.preventDefault();
        const password = passwordInput.value.trim();
        const confirmPassword = confirmPasswordInput.value.trim();

        // Última verificación antes de proceder.
        if (password.length < 6 || password !== confirmPassword) {
            checkPasswords();
            return;
        }
        btnCheckPassword.classList.add('opacity-50', 'cursor-not-allowed');

        // Oculta la sección actual y muestra la siguiente (si existen en el DOM).
        hideElement('loginCreatePasswordDiv');
        showElement('loginCreatePasswordNameDiv');
        // Aquí puedes agregar la lógica adicional para el envío del formulario.
    });
</script>
