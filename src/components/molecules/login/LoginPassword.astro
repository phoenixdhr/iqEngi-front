---
/* Si estás usando Astro, aquí podrías importar algo si fuera necesario,
   por ejemplo variables de entorno o configuración del sitio.
   En caso contrario, puedes omitir esta sección. */
---

<!-- Modal para "Crear una contraseña" --><!-- Título e indicación -->
<h2 class="text-xl font-semibold mb-1 text-center">Ingresa tu contraseña</h2>

<!-- Formulario para ingresar y confirmar contraseña -->
<div id="astro-login-form" class="relative flex flex-col justify-center mt-7">
    <form class="space-y-6" id="loginUserPasswordForm">
        <input
            id="passwordLoginInput"
            type="password"
            placeholder="Contraseña"
            onblur="this.value = this.value.trim()"
            required
            class="w-full h-12 px-4 bg-white border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-400 rounded-full text-gray-900 text-center placeholder:text-center"
        />

        <button
            type="submit"
            class="w-full h-12 text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 font-medium text-base hover:scale-105 transition-transform rounded-full"
        >
            Continuar
        </button>
    </form>

    <!-- Mensaje de error -->
    <p class="mt-2 text-transparent text-center">
        *<span
            id="errorIncorrectPasswordSpan"
            class="text-red-700 mt-2 hidden text-center"></span>
    </p>
</div>

<!-- Aviso de términos y políticas -->
<p class="text-base text-gray-500 text-center mt-6">
    <button
        id="btnForgotPassword"
        class="text-purple-dark-400 underline hover:text-purple-dark-400 hover:underline cursor-pointer"
        >¿Olvidaste tu contraseña?</button
    >
</p>

<!-- Listener para mostrar el modal cuando se dispare el evento "open-login-password-modal" -->
<script>
    import { clientGql } from '@graphql-astro/apolloClient.ts';
    import {
        Jwt_RequestPasswordResetDocument,
        LoginDocument,
        type Usuario,
    } from '@graphql-astro/generated/graphql';

    import {
        showElement,
        hideElement,
        clearFields,
    } from '@services/closeOpenLogin';

    const btnForgotPassword = document.getElementById(
        'btnForgotPassword',
    ) as HTMLButtonElement;

    const errorIncorrectPasswordSpan = document.getElementById(
        'errorIncorrectPasswordSpan',
    ) as HTMLParagraphElement;

    btnForgotPassword.addEventListener('click', async () => {
        const emailInput = document.getElementById(
            'emailInput',
        ) as HTMLInputElement;

        const email = emailInput?.textContent || emailInput.value.trim();

        const spanEmailForgotPassword = document.getElementById(
            'spanEmailForgotPassword',
        ) as HTMLSpanElement;
        spanEmailForgotPassword.textContent = email;

        const { data } = await clientGql.mutate({
            mutation: Jwt_RequestPasswordResetDocument,
            variables: {
                requestPasswordResetInput: {
                    email: email,
                },
            },
        });

        hideElement('loginPasswordDiv');
        showElement('forgotPasswordDiv');
    });

    document.addEventListener('DOMContentLoaded', () => {
        const loginUserPasswordForm = document.getElementById(
            'loginUserPasswordForm',
        ) as HTMLFormElement;

        loginUserPasswordForm &&
            loginUserPasswordForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                const passwordLoginInput = document.getElementById(
                    'passwordLoginInput',
                ) as HTMLInputElement;
                const passwordLogin = passwordLoginInput.value.trim();

                const emailInput = document.getElementById(
                    'emailInput',
                ) as HTMLInputElement;

                const email =
                    emailInput?.textContent || emailInput.value.trim();

                try {
                    const { data } = await clientGql.mutate({
                        mutation: LoginDocument,
                        variables: {
                            loginUserInput: {
                                email: email,
                                password: passwordLogin,
                            },
                        },
                    });

                    const usuario: Usuario = data.login;

                    //// CODIGO DE BIENVENIDA
                    hideElement('loginPasswordDiv');
                    hideElement('btnBack');
                    showElement('bienvenidaDiv');

                    const firstNameWelcomeSpan = document.getElementById(
                        'firstNameWelcomeSpan',
                    ) as HTMLSpanElement;
                    firstNameWelcomeSpan.textContent = usuario?.firstName
                        ? usuario.firstName.split(' ')[0]
                        : '';

                    clearFields(['errorIncorrectPasswordSpan']);
                } catch (error) {
                    console.error('Error al iniciar sesión:', error);
                    const mensaje = String(error).split(':')[1]?.trim();
                    errorIncorrectPasswordSpan.textContent = mensaje;
                    showElement('errorIncorrectPasswordSpan');

                    // Aquí puedes manejar el error, por ejemplo, mostrar un mensaje al usuario
                }
            });
    });
</script>
