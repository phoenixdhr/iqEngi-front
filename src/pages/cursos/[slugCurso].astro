---
import type { GetStaticPaths } from 'astro';
import { clientGql } from '@graphql-astro/apolloClient';

import '@styles/global.css';
import { CursosDocument, type Curso } from '@graphql-astro/generated/graphql';
import LayoutSeo from '@layouts/LayoutSeo.astro';
import { getCourseJsonLd } from 'src/utils/jsonld';
import Titulo from '@components/atoms/Titulo.astro';
import { Icon } from 'astro-icon/components';
export const prerender = true;

interface Props extends Curso {
    isBig: boolean; // Agregando una nueva propiedad
}

export const getStaticPaths = (async () => {
    const { data } = await clientGql.query({
        query: CursosDocument,
        variables: { offset: 0, limit: 10 },
    });

    const cursos: Curso[] = data?.Cursos;

    const prospParams = cursos.map((curso) => ({
        props: { ...curso },
        params: { slugCurso: `${curso.slug!}` }, // Aseguramos que slug sea un string
    }));
    return prospParams;
}) satisfies GetStaticPaths;

const {
    courseTitle,
    imagenURL,
    descripcionCorta,
    // duracionHoras,
    // precio,
    _id,
    slug,
} = Astro.props as Curso;

const slugCurso = slug;

const courseJsonLd = getCourseJsonLd(Astro.props);
---

<LayoutSeo
    tituloPagina={courseTitle}
    description={descripcionCorta}
    slug={`${slugCurso}`}
    image={imagenURL?.url}
    type="article"
    seoJsonLd={courseJsonLd}
>
    <h1></h1>
    <h1
        class="flex flex-col justify-center items-center"
        transition:name=`${courseTitle}-text`
    >
        {courseTitle}
    </h1>

    <div class="flex">
        <Titulo>{courseTitle}</Titulo>
        <button
            id="btn-favorito"
            class="ml-4 animate-pulse cursor-pointer"
            data-id={_id}
            data-coursetitle={courseTitle}
        >
            <Icon name="heart-line" id={`heart-line-${_id}`} size={50} />
            <Icon
                name="heart-full"
                id={`heart-full-${_id}`}
                class="hidden"
                size={50}
            />
        </button>

        <button onclick="history.back()" class="text-blue-500 cursor-pointer">
            Regresar
        </button>
    </div>

    <div class="flex justify-between m-4">
        <h2>{descripcionCorta}</h2>
        <img
            src={imagenURL?.url}
            alt={imagenURL?.alt}
            transition:name=`${courseTitle}-image`
        />
    </div>
</LayoutSeo>

<script>
    import { FAVORITOS_CURSOS } from '@const/const-string';

    interface FavoritosCursos {
        courseTitle: string;
        id: string;
    }

    function handleFavoritos() {
        const btnFavorito = document.getElementById(
            'btn-favorito',
        ) as HTMLButtonElement;
        const id = btnFavorito?.dataset.id ?? '';
        const courseTitle = btnFavorito?.dataset.coursetitle ?? '';

        const iconHeartFull = btnFavorito?.querySelector(
            `#heart-full-${id}`,
        ) as HTMLImageElement;
        const iconHeartLine = btnFavorito?.querySelector(
            `#heart-line-${id}`,
        ) as HTMLImageElement;

        let favoritosCursos: FavoritosCursos[] = JSON.parse(
            localStorage.getItem('favoritosCursos') || '[]',
        );

        function toggleFavorito() {
            const isFavorito = favoritosCursos.some(
                (favorito) => favorito.id == id,
            );
            if (isFavorito) {
                //'curso ya favorito'
                favoritosCursos = favoritosCursos.filter(
                    (favorito) => favorito.id !== id,
                );
            } else {
                //'curso no favorito'

                favoritosCursos.push({ id, courseTitle });
            }

            localStorage.setItem(
                FAVORITOS_CURSOS,
                JSON.stringify(favoritosCursos),
            );
        }

        function handleheart() {
            const isFavorito = favoritosCursos.some(
                (favorito) => favorito.id == id,
            );

            if (isFavorito) {
                iconHeartFull?.classList.remove('hidden');
                iconHeartLine?.classList.add('hidden');
            }
        }

        handleheart();

        btnFavorito?.addEventListener('click', () => {
            iconHeartFull?.classList.toggle('hidden');
            iconHeartLine?.classList.toggle('hidden');
            toggleFavorito();
        });
    }

    document.addEventListener('astro:page-load', handleFavoritos);
</script>
